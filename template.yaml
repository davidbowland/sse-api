AWSTemplateFormatVersion: 2010-09-09
Description: >-
  API for sse project

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - test
    Description: Environment for deploy
  SuggestClaimsUrl:
    Type: String
    Description: URL used for sourcing claims

Mappings:
  EnvironmentMap:
    prod:
      certificate: adce1a21-90b4-4120-8548-111215e582f0
      corsDomain: https://sse.dbowland.com
      domain: sse-api.dbowland.com
      logStreamFunction: log-subscriber
      project: sse
      promptTable: sse-api-prompts
      sessionTable: sse-api-sessions
      zoneId: Z072422417XWM8PIXXSFA
    test:
      certificate: 6a48cba7-feb9-4de5-8cbf-d383140fcdef
      corsDomain: https://sse.bowland.link
      domain: sse-api.bowland.link
      logStreamFunction: log-subscriber-test
      project: sse-test
      promptTable: sse-api-prompts-test
      sessionTable: sse-api-sessions-test
      zoneId: Z01312547RGU1BYKIJXY

Resources:
  # API Gateway

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - Authorization
          - Content-Type
          - X-Amz-Date
          - X-Amz-Security-Token
          - X-Api-Key
          - X-Twitch-Token
        AllowMethods:
          - DELETE
          - GET
          - OPTIONS
          - PATCH
          - POST
          - PUT
        AllowOrigins:
          - !FindInMap [EnvironmentMap, !Ref Environment, corsDomain]
      Domain:
        BasePath:
          - /v1
        CertificateArn: !Sub
          - 'arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${Certificate}'
          - Certificate: !FindInMap [EnvironmentMap, !Ref Environment, certificate]
        DomainName: !FindInMap [EnvironmentMap, !Ref Environment, domain]
        EndpointConfiguration: REGIONAL
        Route53:
          DistributionDomainName: !FindInMap [EnvironmentMap, !Ref Environment, domain]
          HostedZoneId: !FindInMap [EnvironmentMap, !Ref Environment, zoneId]
      FailOnWarnings: true
      StageName: v1

  # Session

  PostSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-session.postSessionHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 1536
      Description: Create session
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
      Environment:
        Variables:
          DYNAMODB_SESSION_TABLE_NAME: !Ref SessionTable
          ID_MAX_LENGTH: 16
          ID_MIN_LENGTH: 6
          SESSION_EXPIRE_HOURS: 36
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /sessions
            Method: post
      Tags:
        'created-by': 'sse-api'
        'created-for': 'sse'
        'environment': !Ref Environment
      Timeout: 15
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/post-session.ts

  PostSessionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostSessionFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'sse-api'
        - Key: 'created-for'
          Value: 'sse'
        - Key: 'environment'
          Value: !Ref Environment

  PostSessionGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PostSessionLogGroup

  # LLM invocation

  # Suggest claims

  PostSuggestClaimsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-suggest-claims.postSuggestClaimsHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 1536
      Description: Suggest claims
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: !Ref PromptTable
        # Allow invoking a model in Bedrock
        - Version: 2012-10-17
          Statement:
            - Action:
                - 'bedrock:InvokeModel*'
              Effect: Allow
              Resource: '*'
      Environment:
        Variables:
          DYNAMODB_PROMPT_TABLE_NAME: !Ref PromptTable
          SUGGEST_CLAIMS_COUNT: 20
          SUGGEST_CLAIMS_PROMPT_ID: suggest-claims
          SUGGEST_CLAIMS_URL: !Ref SuggestClaimsUrl
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /suggest-claims
            Method: post
      Tags:
        'created-by': 'sse-api'
        'created-for': 'sse'
        'environment': !Ref Environment
      Timeout: 35
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/post-suggest-claims.ts

  PostSuggestClaimsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostSuggestClaimsFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'sse-api'
        - Key: 'created-for'
          Value: 'sse'
        - Key: 'environment'
          Value: !Ref Environment

  PostSuggestClaimsGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PostSuggestClaimsLogGroup

  # Validate claim

  PostValidateClaimFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-validate-claim.postValidateClaimHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 1536
      Description: Validate a claim
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBReadPolicy:
            TableName: !Ref PromptTable
        # Allow invoking a model in Bedrock
        - Version: 2012-10-17
          Statement:
            - Action:
                - 'bedrock:InvokeModel*'
              Effect: Allow
              Resource: '*'
      Environment:
        Variables:
          DYNAMODB_PROMPT_TABLE_NAME: !Ref PromptTable
          VALIDATE_CLAIM_PROMPT_ID: validate-claim
      Events:
        Api:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /validate-claim
            Method: post
      Tags:
        'created-by': 'sse-api'
        'created-for': 'sse'
        'environment': !Ref Environment
      Timeout: 35
      Tracing: Active
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - src/handlers/post-validate-claim.ts

  PostValidateClaimLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostValidateClaimFunction}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'sse-api'
        - Key: 'created-for'
          Value: 'sse'
        - Key: 'environment'
          Value: !Ref Environment

  PostValidateClaimGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref PostValidateClaimLogGroup

  # DynamoDB

  PromptTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PromptId
          AttributeType: S
        - AttributeName: UpdatedAt
          AttributeType: N
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PromptId
          KeyType: HASH
        - AttributeName: UpdatedAt
          KeyType: RANGE
      TableName: !FindInMap [EnvironmentMap, !Ref Environment, promptTable]
      Tags:
        - Key: 'created-by'
          Value: 'sse-api'
        - Key: 'created-for'
          Value: 'sse'
        - Key: 'environment'
          Value: !Ref Environment

  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: Expiration
        Enabled: true
      TableName: !FindInMap [EnvironmentMap, !Ref Environment, sessionTable]
      Tags:
        - Key: 'created-by'
          Value: 'sse-api'
        - Key: 'created-for'
          Value: 'sse'
        - Key: 'environment'
          Value: !Ref Environment
